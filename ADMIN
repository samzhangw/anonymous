<html><head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>匿名留言系統管理員界面</title>
<link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@300;400;700&family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
<style>
  :root {
    --primary-color: #4a90e2;
    --secondary-color: #2c3e50;
    --background-color: #f5f7fa;
    --text-color: #34495e;
    --success-color: #27ae60;
    --danger-color: #e74c3c;
    --warning-color: #f39c12;
    --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
    --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

  body {
    font-family: 'Roboto', 'Noto Sans TC', sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--background-color);
    margin: 0;
    padding: 0;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding-top: 2rem;
  }

  .container {
    width: 100%;
    max-width: 1200px;
    background-color: #fff;
    border-radius: 12px;
    box-shadow: var(--box-shadow);
    padding: 2rem;
    margin: 2rem;
    transition: var(--transition);
  }

  h1, h2 {
    color: var(--primary-color);
    text-align: center;
    margin-bottom: 1.5rem;
    font-weight: 700;
  }

  #loginForm, #adminPanel {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  input, button {
    padding: 12px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 16px;
    transition: var(--transition);
  }

  input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
  }

  button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    cursor: pointer;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  button:hover {
    background-color: #3a7bc8;
    transform: translateY(-2px);
    box-shadow: 0 7px 14px rgba(50, 50, 93, 0.1), 0 3px 6px rgba(0, 0, 0, 0.08);
  }

  #logoutButton {
    background-color: var(--danger-color);
    padding: 8px 16px;
    font-size: 14px;
  }

  #logoutButton:hover {
    background-color: #c0392b;
  }

  .tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 2rem;
  }

  .tab-button {
    background-color: transparent;
    color: var(--text-color);
    border: none;
    padding: 10px 20px;
    margin: 0 10px;
    cursor: pointer;
    font-weight: 700;
    transition: var(--transition);
    border-bottom: 3px solid transparent;
  }

  .tab-button.active {
    color: var(--primary-color);
    border-bottom-color: var(--primary-color);
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin-top: 20px;
    overflow: hidden;
    box-shadow: var(--box-shadow);
    border-radius: 8px;
  }

  th, td {
    padding: 16px;
    text-align: left;
    border-bottom: 1px solid #e0e0e0;
  }

  th {
    background-color: var(--secondary-color);
    color: white;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  tr:last-child td {
    border-bottom: none;
  }

  tr:nth-child(even) {
    background-color: #f8f9fa;
  }

  .action-buttons {
    display: flex;
    gap: 0.75rem;
  }

  .approve-btn, .reject-btn, .delete-btn {
    padding: 8px 16px;
    font-size: 14px;
    border-radius: 4px;
  }

  .approve-btn {
    background-color: var(--success-color);
  }

  .approve-btn:hover {
    background-color: #219a52;
  }

  .reject-btn, .delete-btn {
    background-color: var(--danger-color);
  }

  .reject-btn:hover, .delete-btn:hover {
    background-color: #c0392b;
  }

  .message-content {
    max-width: 300px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  #notifications {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
  }

  .notification {
    background-color: var(--primary-color);
    color: white;
    padding: 1rem 1.5rem;
    margin-bottom: 0.75rem;
    border-radius: 8px;
    box-shadow: var(--box-shadow);
    opacity: 0;
    transform: translateX(100%);
    transition: var(--transition);
    font-weight: 500;
  }

  .notification.show {
    opacity: 1;
    transform: translateX(0);
  }

  .notification.success {
    background-color: var(--success-color);
  }

  .notification.error {
    background-color: var(--danger-color);
  }

  @media (max-width: 768px) {
    .container {
      padding: 1.5rem;
      margin: 1rem;
    }

    table, tr, td {
      display: block;
    }

    tr {
      margin-bottom: 1rem;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      overflow: hidden;
    }

    td {
      border: none;
      position: relative;
      padding-left: 50%;
    }

    td:before {
      content: attr(data-label);
      position: absolute;
      left: 12px;
      width: 45%;
      padding-right: 10px;
      white-space: nowrap;
      font-weight: 700;
      text-transform: uppercase;
      font-size: 12px;
      color: var(--secondary-color);
    }
  }
</style>
</head>
<body>
<div class="container">
  <h1>匿名留言系統管理員界面</h1>
  <div id="loginForm">
    <input type="text" id="username" placeholder="管理員用戶名" required>
    <input type="password" id="password" placeholder="密碼" required>
    <button id="loginButton">登入</button>
  </div>
  <div id="adminPanel" style="display: none;">
    <div class="admin-header">
      <h2>管理員面板</h2>
      <button id="logoutButton">登出</button>
    </div>
    <div class="tabs">
      <button class="tab-button active" data-tab="messages">所有留言</button>
      <button class="tab-button" data-tab="deleteRequests">刪除請求</button>
    </div>
    <div id="messagesTab" class="tab-content active">
      <h2>所有留言</h2>
      <table id="messagesTable">
        <thead>
          <tr>
            <th>留言內容</th>
            <th>發布時間</th>
            <th>操作</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    <div id="deleteRequestsTab" class="tab-content">
      <h2>刪除請求列表</h2>
      <table id="deleteRequestsTable">
        <thead>
          <tr>
            <th>留言內容</th>
            <th>請求時間</th>
            <th>操作</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>
</div>
<div id="notifications"></div>

<script>
const API_URL = 'https://script.google.com/macros/s/AKfycbwzxj0PccH4JcM0l6DZ8-YVgCmXy4qadX4nIy5GFrVR6uVGyd94RBOuCwjun1-O0Db9/exec';
let adminToken = localStorage.getItem('adminToken');

function showNotification(message, type = 'info') {
  const notificationsContainer = document.getElementById('notifications');
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.textContent = message;
  notificationsContainer.appendChild(notification);

  setTimeout(() => {
    notification.classList.add('show');
  }, 100);

  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => {
      notificationsContainer.removeChild(notification);
    }, 300);
  }, 3000);
}

async function adminLogin(username, password) {
  try {
    const response = await fetch(`${API_URL}?action=adminLogin&username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`);
    const result = await response.json();
    if (result.success) {
      adminToken = result.adminToken;
      localStorage.setItem('adminToken', adminToken);
      document.getElementById('loginForm').style.display = 'none';
      document.getElementById('adminPanel').style.display = 'block';
      await loadMessages();
      await loadDeleteRequests();
      showNotification('登入成功', 'success');
    } else {
      throw new Error('登入失敗，請檢查用戶名和密碼');
    }
  } catch (error) {
    showNotification(error.message, 'error');
  }
}

async function loadMessages() {
  try {
    const response = await fetch(`${API_URL}?action=getAllMessages&adminToken=${adminToken}`);
    const result = await response.json();
    if (result.success) {
      const tableBody = document.querySelector('#messagesTable tbody');
      tableBody.innerHTML = '';
      result.messages.forEach(message => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td data-label="留言內容" class="message-content">${message.content}</td>
          <td data-label="發布時間">${new Date(message.timestamp).toLocaleString('zh-TW')}</td>
          <td data-label="操作">
            <div class="action-buttons">
              <button class="delete-btn" data-id="${message.id}">刪除</button>
            </div>
          </td>
        `;
        tableBody.appendChild(row);
      });
    } else {
      throw new Error('載入留言失敗');
    }
  } catch (error) {
    showNotification(error.message, 'error');
  }
}

async function loadDeleteRequests() {
  try {
    const response = await fetch(`${API_URL}?action=getDeleteRequests&adminToken=${adminToken}`);
    const result = await response.json();
    if (result.success) {
      const tableBody = document.querySelector('#deleteRequestsTable tbody');
      tableBody.innerHTML = '';
      result.requests.forEach(request => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td data-label="留言內容" class="message-content">${request.deleteCode}</td>
          <td data-label="請求時間">${new Date(request.timestamp).toLocaleString('zh-TW')}</td>
          <td data-label="操作">
            <div class="action-buttons">
              <button class="approve-btn" data-id="${request.id}">批准</button>
              <button class="reject-btn" data-id="${request.id}">拒絕</button>
            </div>
          </td>
        `;
        tableBody.appendChild(row);
      });
    } else {
      throw new Error('載入刪除請求失敗');
    }
  } catch (error) {
    showNotification(error.message, 'error');
  }
}

async function handleDeleteRequest(requestId, action) {
  try {
    const response = await fetch(`${API_URL}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: `action=admin${action.charAt(0).toUpperCase() + action.slice(1)}DeleteRequest&requestId=${requestId}&adminToken=${adminToken}`,
    });
    const result = await response.json();
    if (result.success) {
      showNotification(`成功${action === 'approve' ? '批准' : '拒絕'}刪除請求`, 'success');
      await loadDeleteRequests();
      await loadMessages();
    } else {
      throw new Error(`${action === 'approve' ? '批准' : '拒絕'}刪除請求失敗`);
    }
  } catch (error) {
    showNotification(error.message, 'error');
  }
}

async function handleDeleteMessage(messageId) {
  try {
    const response = await fetch(`${API_URL}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: `action=adminDeleteMessage&messageId=${messageId}&adminToken=${adminToken}`,
    });
    const result = await response.json();
    if (result.success) {
      showNotification('成功刪除留言', 'success');
      await loadMessages();
    } else {
      throw new Error('刪除留言失敗');
    }
  } catch (error) {
    showNotification(error.message, 'error');
  }
}

function logout() {
  adminToken = null;
  localStorage.removeItem('adminToken');
  document.getElementById('loginForm').style.display = 'flex';
  document.getElementById('adminPanel').style.display = 'none';
  document.getElementById('username').value = '';
  document.getElementById('password').value = '';
  showNotification('已成功登出', 'success');
}

document.getElementById('loginButton').addEventListener('click', async () => {
  const username = document.getElementById('username').value;
  const password = document.getElementById('password').value;
  await adminLogin(username, password);
});

document.getElementById('logoutButton').addEventListener('click', logout);

document.getElementById('deleteRequestsTable').addEventListener('click', async (e) => {
  if (e.target.classList.contains('approve-btn') || e.target.classList.contains('reject-btn')) {
    const requestId = e.target.getAttribute('data-id');
    const action = e.target.classList.contains('approve-btn') ? 'approve' : 'reject';
    await handleDeleteRequest(requestId, action);
  }
});

document.getElementById('messagesTable').addEventListener('click', async (e) => {
  if (e.target.classList.contains('delete-btn')) {
    const messageId = e.target.getAttribute('data-id');
    if (confirm('確定要刪除這條留言嗎？')) {
      await handleDeleteMessage(messageId);
    }
  }
});

document.querySelector('.tabs').addEventListener('click', (e) => {
  if (e.target.classList.contains('tab-button')) {
    const tabId = e.target.getAttribute('data-tab');
    document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    e.target.classList.add('active');
    document.getElementById(`${tabId}Tab`).classList.add('active');
  }
});

async function initAdminPanel() {
  if (adminToken) {
    document.getElementById('loginForm').style.display = 'none';
    document.getElementById('adminPanel').style.display = 'block';
    await loadMessages();
    await loadDeleteRequests();
  }
}

initAdminPanel();
</script>
</body></html>
